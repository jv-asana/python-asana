# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana import schemas  # noqa: F401


class ProjectSectionInsertRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "project",
            "section",
        }
        
        class properties:
            project = schemas.StrSchema
            section = schemas.StrSchema
            before_section = schemas.StrSchema
            after_section = schemas.StrSchema
            __annotations__ = {
                "project": project,
                "section": section,
                "before_section": before_section,
                "after_section": after_section,
            }
    
    project: MetaOapg.properties.project
    section: MetaOapg.properties.section
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["before_section"]) -> MetaOapg.properties.before_section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["after_section"]) -> MetaOapg.properties.after_section: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["project", "section", "before_section", "after_section", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["before_section"]) -> typing.Union[MetaOapg.properties.before_section, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["after_section"]) -> typing.Union[MetaOapg.properties.after_section, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["project", "section", "before_section", "after_section", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        project: typing.Union[MetaOapg.properties.project, str, ],
        section: typing.Union[MetaOapg.properties.section, str, ],
        before_section: typing.Union[MetaOapg.properties.before_section, str, schemas.Unset] = schemas.unset,
        after_section: typing.Union[MetaOapg.properties.after_section, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectSectionInsertRequest':
        return super().__new__(
            cls,
            *args,
            project=project,
            section=section,
            before_section=before_section,
            after_section=after_section,
            _configuration=_configuration,
            **kwargs,
        )
