# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana import schemas  # noqa: F401


class ProjectDuplicateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            team = schemas.StrSchema
            
            
            class include(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "members": "MEMBERS",
                        "notes": "NOTES",
                        "forms": "FORMS",
                        "task_notes": "TASK_NOTES",
                        "task_assignee": "TASK_ASSIGNEE",
                        "task_subtasks": "TASK_SUBTASKS",
                        "task_attachments": "TASK_ATTACHMENTS",
                        "task_dates": "TASK_DATES",
                        "task_dependencies": "TASK_DEPENDENCIES",
                        "task_followers": "TASK_FOLLOWERS",
                        "task_tags": "TASK_TAGS",
                        "task_projects": "TASK_PROJECTS",
                    }
                
                @schemas.classproperty
                def MEMBERS(cls):
                    return cls("members")
                
                @schemas.classproperty
                def NOTES(cls):
                    return cls("notes")
                
                @schemas.classproperty
                def FORMS(cls):
                    return cls("forms")
                
                @schemas.classproperty
                def TASK_NOTES(cls):
                    return cls("task_notes")
                
                @schemas.classproperty
                def TASK_ASSIGNEE(cls):
                    return cls("task_assignee")
                
                @schemas.classproperty
                def TASK_SUBTASKS(cls):
                    return cls("task_subtasks")
                
                @schemas.classproperty
                def TASK_ATTACHMENTS(cls):
                    return cls("task_attachments")
                
                @schemas.classproperty
                def TASK_DATES(cls):
                    return cls("task_dates")
                
                @schemas.classproperty
                def TASK_DEPENDENCIES(cls):
                    return cls("task_dependencies")
                
                @schemas.classproperty
                def TASK_FOLLOWERS(cls):
                    return cls("task_followers")
                
                @schemas.classproperty
                def TASK_TAGS(cls):
                    return cls("task_tags")
                
                @schemas.classproperty
                def TASK_PROJECTS(cls):
                    return cls("task_projects")
            
            
            class schedule_dates(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "should_skip_weekends",
                    }
                    
                    class properties:
                        should_skip_weekends = schemas.BoolSchema
                        due_on = schemas.StrSchema
                        start_on = schemas.StrSchema
                        __annotations__ = {
                            "should_skip_weekends": should_skip_weekends,
                            "due_on": due_on,
                            "start_on": start_on,
                        }
                
                should_skip_weekends: MetaOapg.properties.should_skip_weekends
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["should_skip_weekends"]) -> MetaOapg.properties.should_skip_weekends: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["due_on"]) -> MetaOapg.properties.due_on: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["start_on"]) -> MetaOapg.properties.start_on: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["should_skip_weekends", "due_on", "start_on", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["should_skip_weekends"]) -> MetaOapg.properties.should_skip_weekends: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["due_on"]) -> typing.Union[MetaOapg.properties.due_on, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["start_on"]) -> typing.Union[MetaOapg.properties.start_on, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["should_skip_weekends", "due_on", "start_on", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    should_skip_weekends: typing.Union[MetaOapg.properties.should_skip_weekends, bool, ],
                    due_on: typing.Union[MetaOapg.properties.due_on, str, schemas.Unset] = schemas.unset,
                    start_on: typing.Union[MetaOapg.properties.start_on, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'schedule_dates':
                    return super().__new__(
                        cls,
                        *args,
                        should_skip_weekends=should_skip_weekends,
                        due_on=due_on,
                        start_on=start_on,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "name": name,
                "team": team,
                "include": include,
                "schedule_dates": schedule_dates,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include"]) -> MetaOapg.properties.include: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule_dates"]) -> MetaOapg.properties.schedule_dates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "team", "include", "schedule_dates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union[MetaOapg.properties.team, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include"]) -> typing.Union[MetaOapg.properties.include, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule_dates"]) -> typing.Union[MetaOapg.properties.schedule_dates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "team", "include", "schedule_dates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        team: typing.Union[MetaOapg.properties.team, str, schemas.Unset] = schemas.unset,
        include: typing.Union[MetaOapg.properties.include, str, schemas.Unset] = schemas.unset,
        schedule_dates: typing.Union[MetaOapg.properties.schedule_dates, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectDuplicateRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            team=team,
            include=include,
            schedule_dates=schedule_dates,
            _configuration=_configuration,
            **kwargs,
        )
