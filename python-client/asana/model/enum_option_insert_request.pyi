# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana import schemas  # noqa: F401


class EnumOptionInsertRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "enum_option",
        }
        
        class properties:
            enum_option = schemas.StrSchema
            before_enum_option = schemas.StrSchema
            after_enum_option = schemas.StrSchema
            __annotations__ = {
                "enum_option": enum_option,
                "before_enum_option": before_enum_option,
                "after_enum_option": after_enum_option,
            }
    
    enum_option: MetaOapg.properties.enum_option
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enum_option"]) -> MetaOapg.properties.enum_option: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["before_enum_option"]) -> MetaOapg.properties.before_enum_option: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["after_enum_option"]) -> MetaOapg.properties.after_enum_option: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enum_option", "before_enum_option", "after_enum_option", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enum_option"]) -> MetaOapg.properties.enum_option: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["before_enum_option"]) -> typing.Union[MetaOapg.properties.before_enum_option, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["after_enum_option"]) -> typing.Union[MetaOapg.properties.after_enum_option, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enum_option", "before_enum_option", "after_enum_option", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        enum_option: typing.Union[MetaOapg.properties.enum_option, str, ],
        before_enum_option: typing.Union[MetaOapg.properties.before_enum_option, str, schemas.Unset] = schemas.unset,
        after_enum_option: typing.Union[MetaOapg.properties.after_enum_option, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EnumOptionInsertRequest':
        return super().__new__(
            cls,
            *args,
            enum_option=enum_option,
            before_enum_option=before_enum_option,
            after_enum_option=after_enum_option,
            _configuration=_configuration,
            **kwargs,
        )
