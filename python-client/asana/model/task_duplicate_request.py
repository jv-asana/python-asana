# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana import schemas  # noqa: F401


class TaskDuplicateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            
            
            class include(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "notes": "NOTES",
                        "assignee": "ASSIGNEE",
                        "subtasks": "SUBTASKS",
                        "attachments": "ATTACHMENTS",
                        "tags": "TAGS",
                        "followers": "FOLLOWERS",
                        "projects": "PROJECTS",
                        "dates": "DATES",
                        "dependencies": "DEPENDENCIES",
                        "parent": "PARENT",
                    }
                
                @schemas.classproperty
                def NOTES(cls):
                    return cls("notes")
                
                @schemas.classproperty
                def ASSIGNEE(cls):
                    return cls("assignee")
                
                @schemas.classproperty
                def SUBTASKS(cls):
                    return cls("subtasks")
                
                @schemas.classproperty
                def ATTACHMENTS(cls):
                    return cls("attachments")
                
                @schemas.classproperty
                def TAGS(cls):
                    return cls("tags")
                
                @schemas.classproperty
                def FOLLOWERS(cls):
                    return cls("followers")
                
                @schemas.classproperty
                def PROJECTS(cls):
                    return cls("projects")
                
                @schemas.classproperty
                def DATES(cls):
                    return cls("dates")
                
                @schemas.classproperty
                def DEPENDENCIES(cls):
                    return cls("dependencies")
                
                @schemas.classproperty
                def PARENT(cls):
                    return cls("parent")
            __annotations__ = {
                "name": name,
                "include": include,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include"]) -> MetaOapg.properties.include: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "include", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include"]) -> typing.Union[MetaOapg.properties.include, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "include", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        include: typing.Union[MetaOapg.properties.include, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskDuplicateRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            include=include,
            _configuration=_configuration,
            **kwargs,
        )
