# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana import schemas  # noqa: F401


class CustomFieldBase(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    description = schemas.StrSchema
                    
                    
                    class enum_options(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['EnumOption']:
                                return EnumOption
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['EnumOption'], typing.List['EnumOption']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'enum_options':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'EnumOption':
                            return super().__getitem__(i)
                    precision = schemas.IntSchema
                    
                    
                    class format(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "currency": "CURRENCY",
                                "identifier": "IDENTIFIER",
                                "percentage": "PERCENTAGE",
                                "custom": "CUSTOM",
                                "none": "NONE",
                            }
                        
                        @schemas.classproperty
                        def CURRENCY(cls):
                            return cls("currency")
                        
                        @schemas.classproperty
                        def IDENTIFIER(cls):
                            return cls("identifier")
                        
                        @schemas.classproperty
                        def PERCENTAGE(cls):
                            return cls("percentage")
                        
                        @schemas.classproperty
                        def CUSTOM(cls):
                            return cls("custom")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("none")
                    
                    
                    class currency_code(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'currency_code':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class custom_label(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'custom_label':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class custom_label_position(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "prefix": "PREFIX",
                                "suffix": "SUFFIX",
                            }
                        
                        @schemas.classproperty
                        def PREFIX(cls):
                            return cls("prefix")
                        
                        @schemas.classproperty
                        def SUFFIX(cls):
                            return cls("suffix")
                    is_global_to_workspace = schemas.BoolSchema
                    has_notifications_enabled = schemas.BoolSchema
                    __annotations__ = {
                        "description": description,
                        "enum_options": enum_options,
                        "precision": precision,
                        "format": format,
                        "currency_code": currency_code,
                        "custom_label": custom_label,
                        "custom_label_position": custom_label_position,
                        "is_global_to_workspace": is_global_to_workspace,
                        "has_notifications_enabled": has_notifications_enabled,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["enum_options"]) -> MetaOapg.properties.enum_options: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> MetaOapg.properties.currency_code: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_label"]) -> MetaOapg.properties.custom_label: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_label_position"]) -> MetaOapg.properties.custom_label_position: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_global_to_workspace"]) -> MetaOapg.properties.is_global_to_workspace: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["has_notifications_enabled"]) -> MetaOapg.properties.has_notifications_enabled: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "enum_options", "precision", "format", "currency_code", "custom_label", "custom_label_position", "is_global_to_workspace", "has_notifications_enabled", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["enum_options"]) -> typing.Union[MetaOapg.properties.enum_options, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> typing.Union[MetaOapg.properties.precision, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> typing.Union[MetaOapg.properties.currency_code, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_label"]) -> typing.Union[MetaOapg.properties.custom_label, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_label_position"]) -> typing.Union[MetaOapg.properties.custom_label_position, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_global_to_workspace"]) -> typing.Union[MetaOapg.properties.is_global_to_workspace, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["has_notifications_enabled"]) -> typing.Union[MetaOapg.properties.has_notifications_enabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "enum_options", "precision", "format", "currency_code", "custom_label", "custom_label_position", "is_global_to_workspace", "has_notifications_enabled", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                enum_options: typing.Union[MetaOapg.properties.enum_options, list, tuple, schemas.Unset] = schemas.unset,
                precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
                currency_code: typing.Union[MetaOapg.properties.currency_code, None, str, schemas.Unset] = schemas.unset,
                custom_label: typing.Union[MetaOapg.properties.custom_label, None, str, schemas.Unset] = schemas.unset,
                custom_label_position: typing.Union[MetaOapg.properties.custom_label_position, str, schemas.Unset] = schemas.unset,
                is_global_to_workspace: typing.Union[MetaOapg.properties.is_global_to_workspace, bool, schemas.Unset] = schemas.unset,
                has_notifications_enabled: typing.Union[MetaOapg.properties.has_notifications_enabled, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    description=description,
                    enum_options=enum_options,
                    precision=precision,
                    format=format,
                    currency_code=currency_code,
                    custom_label=custom_label,
                    custom_label_position=custom_label_position,
                    is_global_to_workspace=is_global_to_workspace,
                    has_notifications_enabled=has_notifications_enabled,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CustomFieldCompact,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldBase':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from asana.model.custom_field_compact import CustomFieldCompact
from asana.model.enum_option import EnumOption
